package com.job5156.run.fix;

import com.google.common.collect.Lists;
import com.job5156.common.PvCitySiteEnum;
import com.job5156.common.util.HibernateCountUtil;
import com.job5156.common.util.PVAccessUtil;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Date;
import java.util.List;

/**
 * @autor:lwb Date: 2015/3/17 17:27
 * 从备份表统计数据以修复某天的城市PV统计里的数据。
 * 因为排程任务有时候更新的数据局部出错，可以跑这个修复某天的数据，前提是某天的备份数据还存在。
 *  */
public class FixCountCitySiteFromBak {
    private JdbcTemplate jdbcTemplateCount = HibernateCountUtil.getJdbcTemplate();
    private static final Logger logger = Logger.getLogger(FixCountCitySiteFromBak.class);

    public static void main(String[] args){
        String dayStr;
        if(args.length == 1) {
            dayStr = args[0];
        } else{
            dayStr = "2015-03-07";
        }
        new FixCountCitySiteFromBak().fix(dayStr); //修复某天的数据

    }

    /**
     * 修复某天的城市PV统计里的数据
     * @param dayStr 需要被修复数据的相应日期，形如2015-03-07
     */
    public void fix(String dayStr){
        logger.info("====从备份表修复" + dayStr + "城市PV统计开始！");
        long startTime = System.currentTimeMillis();
        Date fixDate = DateTime.parse(dayStr).toDate();
        String updateSql = "UPDATE pv_count_city_site SET" +
                " pv_count_site = ?," +
                " ip_count_site = ?," +
                " pv_count_city = ?," +
                " ip_count_city = ?" +
                " WHERE create_date = '" + dayStr + "' AND site_id = ?";
        for(PvCitySiteEnum citySite: PvCitySiteEnum.values()) {
            int siteId = citySite.getSiteId();
            int cityCode = citySite.getCityCode();
            int pv_count_site = countViewBySiteFromBackup(fixDate,siteId);
            int ip_count_site = countIpBySiteFromBackup(fixDate,siteId);
            int pv_count_city = countViewByCityFromBackup(fixDate,cityCode);
            int ip_count_city = countIpByCityFromBackup(fixDate,cityCode);
            try {
                jdbcTemplateCount.update(updateSql, pv_count_site, ip_count_site, pv_count_city, ip_count_city, siteId);
            }catch (DataAccessException e){
                logger.error("更新" + citySite.getName() + "的数据时发生错误");
            }
        }
        long endTime = System.currentTimeMillis();
        logger.info("====从备份表修复" + dayStr + "城市PV统计结束！用时："+((endTime - startTime)/1000/60)+" 分钟");
    }

    /**
     * 从备份表统计某天某城市IP量
     * @param fixDate
     * @param cityCode
     * @return
     */
    private int countIpByCityFromBackup(Date fixDate, int cityCode) {
        Date startDate = new DateTime(fixDate).withTimeAtStartOfDay().toDate();
        Date endDate = new DateTime(fixDate).hourOfDay().withMaximumValue()
                .minuteOfHour().withMaximumValue()
                .secondOfMinute().withMaximumValue()
                .millisOfSecond().withMaximumValue()
                .toDate();
        List params = Lists.newArrayList();
        String sql  = "select count(distinct a.userIp) from PV_Access_IP_Bak a where  a.viewFirstTime between ? and ?";
        params.add(startDate);
        params.add(endDate);
        if(cityCode != PvCitySiteEnum.ALL.getCityCode()){
            sql += " and a.cityCode = ? ";
            params.add(cityCode);
        }
        Integer count = jdbcTemplateCount.queryForObject(sql, params.toArray(), Integer.class);
        return (count == null) ? 0 : count.intValue();
    }

    /**
     * 从备份表统计某天某城市PV量
     * @param fixDate
     * @param cityCode
     * @return
     */
    private int countViewByCityFromBackup(Date fixDate, int cityCode) {
        String pvAccessBakTableName = PVAccessUtil.getPVAccessTableName(fixDate);
        List params = Lists.newArrayList();
        String sql = "select count(*) from " + pvAccessBakTableName + " b where 1=1 ";
        if(cityCode != PvCitySiteEnum.ALL.getCityCode()){
            sql += " and EXISTS(select 1 from PV_Access_IP_Bak a where a.userIp = b.userIp and  a.cityCode = ? )" ;
            params.add(cityCode);
        }
        Integer count =  jdbcTemplateCount.queryForObject(sql, params.toArray(), Integer.class);
        return (count == null) ? 0 : count.intValue();
    }

    /**
     * 从备份表统计某天某站点IP量
     * @param fixDate
     * @param siteId
     * @return
     */
    private int countIpBySiteFromBackup(Date fixDate, int siteId) {
        String pvAccessBakTableName = PVAccessUtil.getPVAccessTableName(fixDate);
        String sql  = "select count(distinct a.userIp) from " + pvAccessBakTableName +" a where 1=1";
        List param = Lists.newArrayList();
        if(siteId != PvCitySiteEnum.ALL.getSiteId()){
            sql+=" AND a.site = ?";
            param.add(siteId);
        }
        Integer count =  jdbcTemplateCount.queryForObject(sql, param.toArray(), Integer.class);
        return (count == null) ? 0 : count.intValue();
    }

    /**
     * 从备份表统计某天某站点PV量
     * @param fixDate
     * @param siteId
     * @return
     */
    private int countViewBySiteFromBackup(Date fixDate, int siteId) {
        String pvAccessBakTableName = PVAccessUtil.getPVAccessTableName(fixDate);
        List params = Lists.newArrayList();
        String sql = "SELECT COUNT(*) FROM " + pvAccessBakTableName + " where 1=1";
        if(siteId != PvCitySiteEnum.ALL.getSiteId()){
            sql += " AND site = ?";
            params.add(siteId);
        }
        Integer count = jdbcTemplateCount.queryForObject(sql, params.toArray(), Integer.class);
        return (count == null) ? 0 : count.intValue();
    }
}
