package com.job5156.beans.mail;

import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.UUID;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.google.common.collect.Lists;
import com.job5156.common.CommonEnum.MailServer;
import com.job5156.common.Constants;
import com.job5156.common.exception.EmailServerConfigException;
import com.job5156.common.util.ChineseCodeChangeUtil;
import com.job5156.common.util.EmailValidator;
import com.job5156.model.mail.EmailQueue;
import com.job5156.vo.mail.MailVo;
import com.job5156.vo.mail.MailVo.MailAttachVo;
import com.job5156.vo.mail.ResumeNotPerfectMailVo;

/**
 * 邮件发送抽象类
 * 
 * @author leo
 */
public class EmailSender {
	private static final Logger logger = Logger.getLogger(EmailSender.class);
	private static final String MAIL_CONTENT_TYPE = "text/html;charset=UTF-8";
	private Session session;
	private EmailServerConfig serverConfig; // 邮件服务器配置

	public EmailSender(MailServer mailServer) throws EmailServerConfigException {
		serverConfig = EmailServerLoader.getServerConfigByName(mailServer.getName());
		if (serverConfig == null) {
			logger.error("获取邮件服务器[" + mailServer.getName() + "]配置失败");
			throw new EmailServerConfigException("获取邮件服务器[" + mailServer.getName() + "]配置失败");
		}
	}
	public EmailSender(String mailSeverName) throws EmailServerConfigException {
		  serverConfig = EmailServerLoader.getServerConfigByName(mailSeverName);
			if (serverConfig == null) {
				logger.error("获取邮件服务器[" + mailSeverName + "]配置失败");
				throw new EmailServerConfigException("获取邮件服务器[" +mailSeverName + "]配置失败");
			}
	}
	/**
	 * 邮件发送
	 * 
	 * @param mailVo
	 * @return
	 */
	@SuppressWarnings({ "unused" })
	public boolean send(MailVo mailVo) {
		boolean flag = false;
		try {
			List<InternetAddress> toAddressList = Lists.newArrayList();
			for (String toAddress : mailVo.getTo()) {
				if (EmailValidator.checkEmail(toAddress)) {
					toAddressList.add(new InternetAddress(toAddress));
				}
			}

			if (CollectionUtils.isEmpty(toAddressList)) {
				return false;
			}

			Message message = new MimeMessage(initSession(serverConfig));

			String fromName = mailVo.getFromName();
			// String fromAddr = disguiseFromAddr(serverConfig.getHostName());
			String fromAddr = serverConfig.getHostName();
			String subject = mailVo.getSubject();
			String content = mailVo.getContent();
			Integer emailType = mailVo.getEmailType() == null ? Constants.MAIL_TYPE_SIMPLIFIED : mailVo.getEmailType();

			if (emailType.equals(Constants.MAIL_TYPE_TRADITIONAL)) {
				fromName = ChineseCodeChangeUtil.convertByOpencc(fromName);
				subject = ChineseCodeChangeUtil.convertByOpencc(subject);
				content = ChineseCodeChangeUtil.convertByOpencc(content);
			}

			if (StringUtils.isNotBlank(serverConfig.getHostName())) {
				message.setFrom(new InternetAddress(fromAddr, mailVo.getFromName()));
			} else {
				message.setFrom();
			}
			message.setRecipients(Message.RecipientType.TO, toAddressList.toArray(new InternetAddress[toAddressList.size()]));

			// 设置邮件标题编码,修复繁体电脑收邮件时标题乱码 leeton 2014-10-22
			// subject = MimeUtility.encodeText(subject,MimeUtility.mimeCharset("utf-8"), null);
			message.setSubject(subject);

			MimeMultipart mimeMultipart = new MimeMultipart();
			MimeBodyPart mimeBodyPart = new MimeBodyPart();

			mimeBodyPart.setContent(content, MAIL_CONTENT_TYPE);
			mimeMultipart.addBodyPart(mimeBodyPart);

			if (ArrayUtils.isNotEmpty(mailVo.getAttachList())) {
				for (MailAttachVo attachVo : mailVo.getAttachList()) {
					if (attachVo.getFile().exists()) {
						mimeBodyPart = new MimeBodyPart();
						FileDataSource fileDataSource = new FileDataSource(attachVo.getFile());
						mimeBodyPart.setDataHandler(new DataHandler(fileDataSource));

						String fileExtension = FilenameUtils.getExtension(fileDataSource.getName());
						mimeBodyPart.setFileName(MimeUtility.encodeText(attachVo.getAttachName() + "." + fileExtension));
						mimeMultipart.addBodyPart(mimeBodyPart);
					}
				}
			}

			message.setContent(mimeMultipart);
			message.setHeader("X-Mailer", "JavaMail");
			message.setSentDate(new Date());
			// 追加亿业科技的邮件发送的API配置
			appendThirdMailHeader(message);

			Transport transport = session.getTransport("smtp");
			Transport.send(message);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("邮件发送异常,收件人[" + StringUtils.join(mailVo.getTo(), ",") + "]:", e);
		}
		return flag;
	}

	/**
	 * 邮件发送
	 * 
	 * @param emailQueue
	 * @return
	 */
	@SuppressWarnings({ "unused" })
	public boolean send(EmailQueue emailQueue) {
		boolean flag = false;
		try {
			List<InternetAddress> toAddressList = Lists.newArrayList();
			String[] toAddr = StringUtils.split(emailQueue.getToAddr(), Constants.MAIL_ADDRESS_SEPARATE_CHAR);
			for (String toAddress : toAddr) {
				if (EmailValidator.checkEmail(StringUtils.trim(toAddress))) {
					toAddressList.add(new InternetAddress(StringUtils.trim(toAddress)));
				}
			}
			if (CollectionUtils.isEmpty(toAddressList)) {
				return false;
			}

			String fromName = emailQueue.getFromName();
			String fromAddr = serverConfig.getHostName();
			String subject = emailQueue.getTitle();
			String content = emailQueue.getContent();
			Integer emailType = emailQueue.getEmailType() == null ? Constants.MAIL_TYPE_SIMPLIFIED : emailQueue.getEmailType();
			if (emailType.equals(Constants.MAIL_TYPE_TRADITIONAL)) {
				fromName = ChineseCodeChangeUtil.convertByOpencc(fromName);
				subject = ChineseCodeChangeUtil.convertByOpencc(subject);
				content = ChineseCodeChangeUtil.convertByOpencc(content);
			}

			Message message = new MimeMessage(initSession(serverConfig));
			if (StringUtils.isNotBlank(serverConfig.getHostName())) {
				message.setFrom(new InternetAddress(fromAddr, emailQueue.getFromName()));
			} else {
				message.setFrom();
			}
			message.setRecipients(Message.RecipientType.TO, toAddressList.toArray(new InternetAddress[toAddressList.size()]));

			// 设置邮件标题编码,修复繁体电脑收邮件时标题乱码 leeton 2014-10-22
			// subject = MimeUtility.encodeText(subject,MimeUtility.mimeCharset("utf-8"), null);
			message.setSubject(subject);

			MimeMultipart mimeMultipart = new MimeMultipart();
			MimeBodyPart mimeBodyPart = new MimeBodyPart();

			mimeBodyPart.setContent(content, MAIL_CONTENT_TYPE);
			mimeMultipart.addBodyPart(mimeBodyPart);

			message.setContent(mimeMultipart);
			message.setHeader("X-Mailer", "JavaMail");
			message.setSentDate(new Date());

			Transport transport = session.getTransport("smtp");
			Transport.send(message);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("邮件发送异常,收件人[" + emailQueue.getToAddr() + "]:", e);
		}
		return flag;
	}

	public static void main(String[] args) {
		try {
			String content = "测试邮件发送内容";
			String[] to = new String[] { "yf_198407@163.com" };
			ResumeNotPerfectMailVo mail = new ResumeNotPerfectMailVo(content, to, Constants.MAIL_TYPE_SIMPLIFIED);
			MailAttachVo attachVo = new MailAttachVo("测试附件scd", new File("D:/测试.rar"));
			mail.setAttachList(attachVo);

			EmailSender sender = new EmailSender(MailServer.BAK2);
			boolean flag = sender.send(mail);
			System.out.println(flag);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 初始化邮件发送的session
	 * 
	 * @return
	 */
	private Session initSession(EmailServerConfig serverConfig) {
		if (null != session) {
			if (!session.getProperty("mail.smtp.host").equals(serverConfig.getMailHost())) {
				session = null;
			}
		}
		if (session == null) {
			Properties props = System.getProperties();
			props.put("mail.smtp.host", serverConfig.getMailHost());
			props.put("mail.smtp.auth", serverConfig.isAuth());
			if (StringUtils.isNotBlank(serverConfig.getPort())) {
				props.put("mail.smtp.port", serverConfig.getPort());
			}

			MailAuthenticator authenticator = null;
			if (serverConfig.isAuth()) {
				authenticator = new MailAuthenticator(serverConfig.getAuthKey(), serverConfig.getAuthVal());
			}
			session = Session.getInstance(props, authenticator);
		}
		return session;
	}

	/**
	 * 亿业邮件发送的API设置 很特别，配置在邮件头设置里
	 */
	private void appendThirdMailHeader(Message message) {
		if (StringUtils.equalsIgnoreCase(serverConfig.getMailHost(), "smtp.easeye.com.cn")) {
			try {
				String APIStr = "{" + " \"category\": \"position recommend\", " + " \"campaign\": \"position recommend by long time no login\", " + " \"send_options\": {" + " \"track_open\": 1, "
						+ " \"track_click\":1, " + " \"track_subscription\":1, " + " \"custom_domain\":\"http://www.job5156.com\", " + " \"filter_by_new_contact_liveliness\": 0 " + " }" + "}";
				message.addHeader("X-Easeye-UniqueMsgID", "ztem-" + StringUtils.abbreviate(UUID.randomUUID().toString(), 8));
				message.addHeader("X-Easeye-API", APIStr);
			} catch (MessagingException e) {
				e.printStackTrace();
			}

		}
	}

	/**
	 * 伪装来源地址
	 * 
	 * @param fromAddr
	 * @return
	 */
	private String disguiseFromAddr(String fromAddr) {
		if (StringUtils.endsWith(fromAddr, "@job5156.com")) {
			fromAddr = "chitone" + RandomStringUtils.randomAlphanumeric(4) + "@job5156.com";
		}
		if (StringUtils.endsWith(fromAddr, "@job5156.com.cn")) {
			fromAddr = "chitone" + RandomStringUtils.randomAlphanumeric(4) + "@job5156.com.cn";
		}
		return fromAddr;
	}
}
