package com.job5156.task.mail;

import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.job5156.beans.ResumeMatchingAnalyzer;
import com.job5156.beans.mail.BaseMailSend;
import com.job5156.beans.mail.EmailSender;
import com.job5156.common.CommonEnum.MailCount;
import com.job5156.common.CommonEnum.MailServer;
import com.job5156.common.CommonEnum.ReceiveType;
import com.job5156.common.Constants;
import com.job5156.common.exception.EmailServerConfigException;
import com.job5156.common.jedis.JedisFactory;
import com.job5156.common.jedis.JedisTemplate;
import com.job5156.common.util.HibernateActionSlaveUtil;
import com.job5156.common.util.HibernateActionUtil;
import com.job5156.common.util.HibernateSalveBaseUtil;
import com.job5156.common.util.IKAnalysisUtil;
import com.job5156.common.util.KeyMaskUtil;
import com.job5156.common.util.MD5Builder;
import com.job5156.model.com.ComReceive;
import com.job5156.model.per.PerResume;
import com.job5156.model.per.PerUser;
import com.job5156.vo.api.ResumeSearchResult;
import com.job5156.vo.api.ResumeSearchResult.PerResVo;
import com.job5156.vo.com.ComPositionGradeVo;
import com.job5156.vo.com.ComPositionVo;
import com.job5156.vo.com.ComReceiveAssistVo;
import com.job5156.vo.mail.PosRecommendMailToComVo;
import com.job5156.vo.per.PerResumeVo;
import com.job5156.vo.per.PerWorkInfoVo;

/**
 * <p>
 * 系统推荐简历
 * </p>
 * 
 * <pre>
 * 1、给企业发送推荐邮件
 * 2、将个人简历推荐到企业管理中心
 * </pre>
 * 
 * Date:2015-6-16 下午3:26:36
 * 
 * @author leo
 * @version 1.0
 */
public class SystemResRecommend extends BaseMailSend{
	private static Logger logger = Logger.getLogger(SystemResRecommend.class);
	/**
	 * 连接REDIS客户端
	 */
	private JedisFactory jedisFactory = JedisFactory.getInstance();
	/**
	 * json转换工具
	 */
	private Gson gson = new Gson();
	/**
	 * 简历匹配度分析器
	 */
	private ResumeMatchingAnalyzer resumeMatchAnalyzer;
	/**
	 * 时间间隔内的简历不能重复，单位”月“
	 */
	private Integer daysInterval;
	/**
	 * 每个职位的简历推荐数量
	 */
	private Integer recommendResNum;
	
	private EmailSender sender;
	
	public SystemResRecommend() throws EmailServerConfigException{
		this.daysInterval = 6;
		this.recommendResNum = 5; 
		sender = new EmailSender(MailServer.MAIN);
		resumeMatchAnalyzer = new ResumeMatchingAnalyzer();
	}

	/*
	 * 每三天推送的企业发布职位不在一周内的企业
	 */
	public static void main(String[] args) {
		SystemResRecommend recommend;
		try {
			recommend = new SystemResRecommend();
			recommend.run();
			HibernateSalveBaseUtil.closeSession();
		} catch (EmailServerConfigException e) {
			logger.error("系统推送简历主函数中出现异常：",e);
		}
	}
	
	@Override
	public void send() {
		
	}
	
	/**
	 * 系统推荐程序入口
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void run(){
		Date compareDate = DateTime.now().minusDays(90).withTimeAtStartOfDay().toDate();
		Date nowDate = DateTime.now().withTimeAtStartOfDay().toDate();
		StringBuffer whereBuf = new StringBuffer(" WHERE cp.create_date >= ? AND cp.pos_status > 0 AND cp.del_status != -1 AND cp.end_date > ?");
		whereBuf.append(" AND cri.member_type >= 1 AND cri.member_type <= 5 AND cri.expire_date >= ? AND cp.com_id = 4936");
		
		String countSql = "SELECT COUNT(cp.id) FROM com_position cp LEFT JOIN com_right cri ON cp.com_id = cri.com_id" + whereBuf.toString();
		JdbcTemplate jdbcTemplateSlave = HibernateSalveBaseUtil.getJdbcTemplate();
		Integer count = jdbcTemplateSlave.queryForObject(countSql, Integer.class, compareDate, nowDate, nowDate);
		
		if(count > 0){
			int allPage = 1;
			int dataLoadNumber = 1000;
			if (count > dataLoadNumber) {
				allPage = count / dataLoadNumber + ((count % dataLoadNumber == 0) ? 0 : 1);
			}
			String baseSql = "SELECT cp.id, cp.pos_name, cp.com_id, cp.email, cp.filter_res, cp.req_gender, cp.req_degree, cp.req_age_min, cp.req_age_max,"
				       	   + "cp.req_work_year, cp.req_location, cp.req_language, cp.pos_keyword, cp.work_location, cp.pos_type"
				           + " FROM com_position cp LEFT JOIN com_right cri ON cp.com_id = cri.com_id" + whereBuf.toString();
			for(int page = 0; page < allPage; page ++){
				String listSql = baseSql + " LIMIT " + (page * dataLoadNumber) + "," + dataLoadNumber;
				List<ComPositionVo> posList = jdbcTemplateSlave.query(listSql, new Object[]{compareDate, nowDate, nowDate}, new BeanPropertyRowMapper(ComPositionVo.class));
				recommendPosList(posList);
			}
		}
	}
	
	/**
	 * 系统推荐程序入口
	 * 发布职位不在一周内的职位，三天执行一次
	 */
	public void run2(){
		//获取总记录数
		int countId = getCountNotLastWeekPos();
		int allPage = countId > 0 ? 1:0;
		int dataLoadNumber = 1000;
		if (countId > dataLoadNumber) {
			allPage = countId / dataLoadNumber + ((countId % dataLoadNumber == 0) ? 0 : 1);
		}
		for (int i = 0; i < allPage; i++) {
			List<ComPositionVo> listRecommendComPosition = getRecommendComPosition(i*dataLoadNumber,i*dataLoadNumber+dataLoadNumber);
			recommendPosList(listRecommendComPosition);
		}
	}
	
	/**
	 * 系统推荐程序入口
	 * 发布职位在一周内的职位，两天执行一次
	 */
	public void run3(){
		recommendPosList(getLastWeekPosition());
	}
	
	/**
	 * 根据职位列表推荐简历信息
	 * @param posList
	 */
	private void recommendPosList(List<ComPositionVo> posList){
		if(CollectionUtils.isNotEmpty(posList)){
			for(ComPositionVo comPosition : posList){
				// TODO 
				//boolean posResFlag = isPosRes(comPosition.getId());
				boolean posResFlag = true;
				if(posResFlag){
					List<NameValuePair> paramList = assembleResumeSearchParam(comPosition);
					
					logger.info("---- search condition id[" + comPosition.getId() + "] posName[" + comPosition.getPosName() + "]");
					if(CollectionUtils.isNotEmpty(paramList)){
						for(NameValuePair valuePair : paramList){
							logger.info(valuePair.getName() + " => " + valuePair.getValue());
						}
					}
					
					List<PerUser> userList = getMatchedResumeListWithPosition(paramList);
					if(CollectionUtils.isEmpty(userList)){
						logger.error("==== search matching resume list empty: posId[" + comPosition.getId() + "], posName[" + comPosition.getPosName() + "]");
					}
					
					//推送简历列表到企业管理中心
					List<Integer> resumeIdList = addToComReceive(comPosition, userList);
					//记录推荐简历到REDIS
					logRecommendedToRedis(comPosition.getId(), resumeIdList);
				}
			}
		}
	}

	/**
	 * 发送邮件信息
	 * 
	 * @param userList
	 * @param statusMap
	 * @throws IOException
	 */
	private void sendComMail(ComPositionVo comPosition, List<PerUser> userList) {
		if (null != comPosition && CollectionUtils.isNotEmpty(userList)) {
			Map<String, Integer> statusMap =  Maps.newHashMap();
			try {
				String mailContent = this.assembleMailContent(comPosition, userList,statusMap);
				if(StringUtils.isNotBlank(mailContent)) {
					String email = getOneVaildEmail(comPosition.getEmail());
					if(StringUtils.isBlank(email)){
                        this.addMailCount(statusMap, MailCount.EMAIL_ADDR_FILTER);
                        return;
                    }
					String[] toEmail = new String[]{email};
					boolean flag = sender.send(new PosRecommendMailToComVo(mailContent, toEmail, Constants.MAIL_TYPE_SIMPLIFIED));
					if(flag){
						this.addMailCount(statusMap, MailCount.SEND_SUCCESS);
					}else{
						this.addMailCount(statusMap, MailCount.SEND_FAIL);
					}
					Thread.sleep(500);
				}
				
				/**发送测试邮件**/
				this.addSendNum();
				if(this.getSendNum() % this.getSendTestMailPerNum() == 0){
					sender.send(new PosRecommendMailToComVo(mailContent, this.getTestMailAddr(), Constants.MAIL_TYPE_SIMPLIFIED));
				}
			} catch (Exception e) {
				this.addMailCount(statusMap, MailCount.SEND_FAIL);
				logger.error("系统推送简历，发送邮件中异常：", e);
			}
			
		}
	}
	
	/**
	 * 判断当前职位是否是收到简历过少的职位
	 * @param posId
	 * @return
	 */
	private boolean isPosRes(Integer posId){
		if(posId != null && posId > 0){
			JedisTemplate jedisTemplate = jedisFactory.getJedisTemplate(Constants.REDIS_KEY_COM_LESS_RECEIVE_RESUME_LIST);
			String posNo = String.valueOf(KeyMaskUtil.posIdToNo(posId, Constants.POS_TYPE_ONLINE.shortValue()));
			return jedisTemplate.isInSet(Constants.REDIS_KEY_COM_LESS_RECEIVE_RESUME_LIST, posNo);
		}
		return false;
	}
	
	/**
	 * 将简历推送到企业管理中心
	 * @param comPosition
	 * @param userList
	 */
	private List<Integer> addToComReceive(ComPositionVo comPosition, List<PerUser> userList){
		List<Integer> resumeIdList = Lists.newArrayList();
		if(CollectionUtils.isNotEmpty(userList)){
			logger.info("---- posId[" + comPosition.getId() + "] posName[" + comPosition.getPosName() + "] Recommend UserList ----");
			
			int recommendNum = 0;
			for(PerUser perUser : userList){
				if(recommendNum >= recommendResNum){
					break;
				}
				PerResume perResume = perUser.getDefaultPerResume();
				perResume.setPerUser(perUser);
				
				//计算简历匹配度
				double matchRat = 0.0;
				try{
					matchRat = resumeMatchAnalyzer.getResumeMatchScore(comPosition, perResume);
				}catch(Exception e){
					e.printStackTrace();
				}
				
				//最高分值1
				if(matchRat >= 0.5){
					//推送简历到企业管理中心
					saveComReceiveInfo(perUser, perResume, comPosition, matchRat);
					recommendNum ++;
					resumeIdList.add(perResume.getId());
					logger.info("---- userId[" + perUser.getId() + "] userName[" + perUser.getUserName() + "] Success");
				}else{
					logger.info("---- userId[" + perUser.getId() + "] userName[" + perUser.getUserName() + "] Fail, matchRat:" + matchRat);
				}
			}
		}
		return resumeIdList;
	}
	
	/**
	 * 组装邮件内容
	 * @TODO 
	 * @param perUser
	 * @return
	 * @throws IOException
	 */
	private String assembleMailContent(ComPositionVo comPosition, List<PerUser> userList, Map<String, Integer> statusMap) throws IOException {
		if (comPosition != null && CollectionUtils.isNotEmpty(userList)) {
			
			/*String morePosLink = this.assembleMoreLink(perResume);
			String unsubscribeLink = this.assembleUnsubscribeLink(comPosition, Constants.MAIL_TASK_SYSTEM_RES_RECOMMEND);*/
			
			Map<String, Object> map = Maps.newHashMap();
			map.put("userList", userList);
			map.put("comPosition", comPosition);
/*			map.put("dateInterval", Days.daysBetween(new DateTime(perUser.getLoginDate()), DateTime.now()).getDays());
			map.put("morePosLink", morePosLink);
			map.put("unsubscribeLink", unsubscribeLink);*/

/*			Configuration configure = FreemarkerConfigure.getFreemarkerConfig();
			Template template = configure.getTemplate("mail/third/system_pos_recommend.ftl");

			try {
				StringWriter result = new StringWriter();
				template.process(map, result);
				return result.toString();
			} catch (TemplateException e) {
				logger.error("===邮件模板解析异常：" + e.getMessage(), e);
			}*/
		}
		return StringUtils.EMPTY;
	}
	
	/**
	 * 获取企业发布职位为最近一周的职位信息
	 * @return list<ComPosition>
	 */
	private List<ComPositionVo> getLastWeekPosition() {
		//七天前的日期
		String nowDate = new DateTime(new Date()).toString("yyyy-MM-dd HH:mm:ss");
		String date = new DateTime(new Date()).minusDays(7).toString("yyyy-MM-dd HH:mm:ss");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("a.id,a.com_id,a.department_id,a.com_user_id,a.pos_type,a.pos_type_sys, ");
		sql.append("a.pos_name,a.urgent,a.pos_keyword,a.property,a.recruitment_number, ");
		sql.append("a.end_date,a.work_location,a.salary,a.negotiable_flag,a.tao_label, ");
		sql.append("a.req_gender,a.req_degree,a.req_age_min,a.req_age_max,a.req_work_year, ");
		sql.append("a.req_location,a.req_language,a.req_language_level,a.filter_degree, ");
		sql.append("a.filter_age,a.filter_work_year,a.filter_gender,a.description, ");
		sql.append("a.interview_note,a.auto_reply,a.school_flag,a.create_date,a.update_date, ");
		sql.append("a.refresh_date,a.pos_status,a.auditor_id,a.audit_date,a.del_status, ");
		sql.append("a.resume_count_recent,a.contact_person,a.gender,a.contact_phone, ");
		sql.append("a.hide_phone,a.mobile,a.mobile_alert,a.hide_mobile,a.fax,a.hide_fax,a.email, ");
		sql.append("a.hide_email,a.email_format,a.address,a.interview_address,a.bus_line, ");
		sql.append("a.near_station,a.zip_code,a.website,a.lat,a.lng,a.reject_email, ");
		sql.append("a.accept_resume_type,a.max_salary,a.min_salary,a.filter_res,a.contact_id, ");
		sql.append("a.irc_pos_id,a.irc_product_id ");
		sql.append("FROM com_position a ");
		//企业权限
		sql.append("LEFT JOIN com_right cri ON a.com_id = cri.com_id ");
		sql.append("LEFT JOIN com_position b ");
		sql.append("ON a.com_id = b.com_id and a.create_date < b.create_date and b.create_date >='"+date+"' ");
		sql.append("WHERE a.create_date >='"+date+"' ");
		sql.append("AND a.pos_status > 0 AND a.del_status != -1 AND a.end_date > '"+nowDate+"' ");
		sql.append("AND cri.member_type >= 1 AND cri.member_type <= 5 AND cri.expire_date >= '"+nowDate+"' ");
		sql.append("GROUP by a.id,a.com_id,a.create_date ");
		sql.append("HAVING count(b.com_id) < 3 ");
		sql.append("ORDER BY a.com_id,a.create_date desc ");
		JdbcTemplate jdbcTemplate = HibernateSalveBaseUtil.getJdbcTemplate();
		List<ComPositionVo> list = jdbcTemplate.query(sql.toString(), new BeanPropertyRowMapper(ComPositionVo.class));
		return  list;
	}
	
	/**
	 * 获取企业发布职位为不在最近一周的职位总数
	 * @return list<ComPosition>
	 */
	private Integer getCountNotLastWeekPos(){
		//七天前的日期
		String date = new DateTime(new Date()).minusDays(7).toString("yyyy-MM-dd HH:mm:ss");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT COUNT(*) ");
		sql.append("FROM com_position a ");
		//企业权限
		sql.append("LEFT JOIN com_right cri ON a.com_id = cri.com_id ");
		//职位发布时间在一周前
		sql.append("WHERE a.create_date <'" + date + "' ");
		//职位在一周内收到的简历小于11份
		sql.append("AND a.resume_count_recent < 11 ");
		//发布职位在截止日期之前
		String nowDate = new DateTime(new Date()).toString("yyyy-MM-dd HH:mm:ss");
		sql.append("AND a.pos_status > 0 AND a.del_status != -1 AND a.end_date > '" + nowDate + "' ");
		sql.append("AND cri.member_type >= 1 AND cri.member_type <= 5 AND cri.expire_date >= '" + nowDate + "' ");
		//过滤发布职位在一周内的企业
		sql.append("AND a.com_id not in(");
		sql.append("SELECT a.com_id ");
		sql.append("FROM com_position a ");
		sql.append("LEFT JOIN com_right cri ON a.com_id = cri.com_id ");
		//职位发布时间在一周内
		sql.append("WHERE a.create_date >='" + date + "' ");
		sql.append("AND a.pos_status > 0 AND a.del_status != - 1 ");
		sql.append("AND a.end_date > '" + nowDate + "' ");
		sql.append("AND cri.member_type >= 1 AND cri.member_type <= 5 ");
		sql.append("AND cri.expire_date >= '" + nowDate + "' ");
		sql.append(")");
		JdbcTemplate jdbcTemplate = HibernateSalveBaseUtil.getJdbcTemplate();
		return jdbcTemplate.queryForInt(sql.toString());
	}
	/**
	 * 获取企业职位发布时间不在一周内的职位信息
	 * 包括企业收到的简历数量
	 * @param startId id开始值
	 * @param endId id结束值
	 * @return List<ComPosition>
	 */
	private List<ComPositionVo> getNotLastWeekPosition(int start, int end) {
		//id最大值
		int max = end == 0 ? 10000:end;
		//七天前的日期
		String date = new DateTime(new Date()).minusDays(7).toString("yyyy-MM-dd HH:mm:ss");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("a.id,a.com_id,a.department_id,a.com_user_id,a.pos_type,a.pos_type_sys, ");
		sql.append("a.pos_name,a.urgent,a.pos_keyword,a.property,a.recruitment_number, ");
		sql.append("a.end_date,a.work_location,a.salary,a.negotiable_flag,a.tao_label, ");
		sql.append("a.req_gender,a.req_degree,a.req_age_min,a.req_age_max,a.req_work_year, ");
		sql.append("a.req_location,a.req_language,a.req_language_level,a.filter_degree, ");
		sql.append("a.filter_age,a.filter_work_year,a.filter_gender,a.description, ");
		sql.append("a.interview_note,a.auto_reply,a.school_flag,a.create_date,a.update_date, ");
		sql.append("a.refresh_date,a.pos_status,a.auditor_id,a.audit_date,a.del_status, ");
		sql.append("a.resume_count_recent,a.contact_person,a.gender,a.contact_phone, ");
		sql.append("a.hide_phone,a.mobile,a.mobile_alert,a.hide_mobile,a.fax,a.hide_fax,a.email, ");
		sql.append("a.hide_email,a.email_format,a.address,a.interview_address,a.bus_line, ");
		sql.append("a.near_station,a.zip_code,a.website,a.lat,a.lng,a.reject_email, ");
		sql.append("a.accept_resume_type,a.max_salary,a.min_salary,a.filter_res,a.contact_id, ");
		sql.append("a.irc_pos_id,a.irc_product_id ");
		sql.append("FROM com_position a ");
		sql.append("LEFT JOIN com_right cri ON a.com_id = cri.com_id ");
		//职位在一周内收到的简历小于11份
		sql.append("WHERE a.resume_count_recent < 11 ");
		String nowDate = new DateTime(new Date()).toString("yyyy-MM-dd HH:mm:ss");
		sql.append("AND a.pos_status > 0 AND a.del_status != -1 AND a.end_date > '"+nowDate+"' ");
		sql.append("AND cri.member_type >= 1 AND cri.member_type <= 5 AND cri.expire_date >= '"+nowDate+"' ");
		//职位发布时间在一周前
		sql.append("AND a.create_date <'"+date+"' ");
		//过滤发布职位在一周内的企业
		sql.append("AND a.com_id not in(");
		sql.append("SELECT a.com_id ");
		sql.append("FROM com_position a ");
		sql.append("LEFT JOIN com_right cri ON a.com_id = cri.com_id ");
		//职位发布时间在一周内
		sql.append("WHERE a.create_date >='" + date + "' ");
		sql.append("AND a.pos_status > 0 AND a.del_status != - 1 ");
		sql.append("AND a.end_date > '" + nowDate + "' ");
		sql.append("AND cri.member_type >= 1 AND cri.member_type <= 5 ");
		sql.append("AND cri.expire_date >= '" + nowDate + "' ");
		sql.append(")");
		sql.append("GROUP BY a.com_id,a.id ");
		sql.append("ORDER BY a.resume_count_recent DESC ");
		sql.append("LIMIT " + start +  "," + max + " ");
		JdbcTemplate jdbcTemplate = HibernateSalveBaseUtil.getJdbcTemplate();
		List<ComPositionVo> list = jdbcTemplate.query(sql.toString(), new BeanPropertyRowMapper(ComPositionVo.class));
		return  list;
	}
	
	/**
	 * 获取comId字符串
	 * @param listComPosition
	 * @return 字符串，如1,2,3;2,5  企业与企业（职位与职位）直接用,拼接。企业与职位用;拼接。
	 */
	private String getComPosStr(List<ComPositionVo> listComPosition) {
		Set<Integer> comIdSet = Sets.newHashSet();
		Set<Integer> posIdSet = Sets.newHashSet();
		for(int i = 0; i < listComPosition.size(); i ++) {
			comIdSet.add(listComPosition.get(i).getComId());
			posIdSet.add(listComPosition.get(i).getId());
		}
		return StringUtils.join(comIdSet,",")+";"+StringUtils.join(posIdSet,",");
	}
	
	/**
	 * 查询企业收到后台推荐已读简历数量/企业收到后台推荐所有简历数量，以及分数；不适合推送的集合
	 * @param licomPosition  企业发布时间不在一周内的职位信息list
	 * @return List<ComPositionGrade>
	 */
	private List<ComPositionGradeVo> getComReceiveByComIdPosId(String comPosStr){
		String comIdStr = StringUtils.isNotBlank(comPosStr)?comPosStr.split(";")[0]:"";
		String posIdStr = StringUtils.isNotBlank(comPosStr)?comPosStr.split(";")[1]:"";
		if(StringUtils.isBlank(comIdStr) || StringUtils.isBlank(posIdStr)) {
			return null;
		}
		//七天前的日期
		String date = new DateTime(new Date()).minusDays(7).toString("yyyy-MM-dd HH:mm:ss");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT d.com_id as dcom_id,c.com_id,c.pos_id,c.pos_count, ");
		sql.append("CASE ");
		sql.append("WHEN c.pos_count<=2 THEN 20 ");
		sql.append("WHEN c.pos_count<=5 THEN 15 ");
		sql.append("WHEN c.pos_count<=10 THEN 10 ");
		sql.append("ELSE 20 ");
		sql.append("END AS pos_count_grade, ");
		sql.append("e.readResume,d.allResume, ");
		sql.append("CASE  ");
		sql.append("WHEN e.readResume/d.allResume>=0.9 THEN 20 ");
		sql.append("WHEN e.readResume/d.allResume>=0.6 THEN 15 ");
		sql.append("WHEN e.readResume/d.allResume>=0.3 THEN 10 ");
		sql.append("ELSE  5 ");
		sql.append("END AS ratio_grade ");
		sql.append("FROM ");
		sql.append("( ");
		sql.append("select id,com_id,pos_id,count(pos_id) as allResume ");
		sql.append("from com_receive ");
		sql.append("where  ");
		sql.append("receive_type = 1 ");
		sql.append("and com_id in(" + comIdStr + ") ");
		sql.append("and pos_id in(" + posIdStr + ") ");
		sql.append("and del_status != -1 ");
		sql.append("group by com_id ");
		sql.append(")as d ");
		sql.append("left join  ");
		sql.append("( ");
		sql.append("select id,pos_id,com_id,count(pos_id) as readResume ");
		sql.append("from com_receive ");
		sql.append("where ");
		sql.append("receive_type = 1 ");
		sql.append("and com_id in(" + comIdStr + ") ");
		sql.append("and pos_id in(" + posIdStr + ") ");
		sql.append("and read_flag = 1 ");
		sql.append("and del_status != -1 ");
		sql.append("group by com_id ");
		sql.append(")as e ");
		sql.append("on d.com_id = e.com_id ");
		sql.append("left join ");
		sql.append("(select com_id,pos_id,count(pos_id) as pos_count ");
		sql.append("from com_receive ");
		sql.append("where  ");
		sql.append("com_id in(" + comIdStr + ") ");
		sql.append("and pos_id in(" + posIdStr + ") ");
		sql.append("and del_status != -1 ");
		sql.append("and create_date >= '" + date + "' ");
		sql.append("group by com_id,pos_id ");
		sql.append("having count(pos_id) <= 10 ");
		sql.append("order by com_id , pos_count desc ");
		sql.append(")as c ");
		sql.append("on d.com_id = c.com_id ");
		sql.append("having e.readResume/d.allResume >= 0.3  and pos_count_grade+ratio_grade >= 30 ");
		sql.append("order by com_id,(pos_count_grade+ratio_grade) desc,pos_count_grade desc,ratio_grade desc ");
		JdbcTemplate jdbcTemplate = HibernateActionSlaveUtil.getJdbcTemplate();
		List<ComPositionGradeVo> list = jdbcTemplate.query(sql.toString(), new BeanPropertyRowMapper(ComPositionGradeVo.class));
		return list;
	}
	
	/**
	 * 发布时间不在一周内，最近一周收到的简历数量不为0
	 * @param posIdStr
	 * @return
	 */
	private List<ComPositionGradeVo> getComReceiveByPos(String comPosStr){
		String comIdStr = StringUtils.isNotBlank(comPosStr)?comPosStr.split(";")[0]:"";
		String posIdStr = StringUtils.isNotBlank(comPosStr)?comPosStr.split(";")[1]:"";
		if(StringUtils.isBlank(comIdStr) || StringUtils.isBlank(posIdStr)) {
			return null;
		}
		//七天前的日期
		String date = new DateTime(new Date()).minusDays(7).toString("yyyy-MM-dd HH:mm:ss");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT com_id,pos_id ");
		sql.append("FROM com_receive ");
		sql.append("WHERE ");
		sql.append("com_id in (" + comIdStr + ") ");
		sql.append("and pos_id in(" + posIdStr + ") ");
		sql.append("and del_status != -1 ");
		sql.append("and create_date >= '" + date + "' ");
		sql.append("group by com_id,pos_id ");
		JdbcTemplate jdbcTemplate = HibernateActionSlaveUtil.getJdbcTemplate();
		List<ComPositionGradeVo> list = jdbcTemplate.query(sql.toString(), new BeanPropertyRowMapper(ComPositionGradeVo.class));
		return list;
	}

	/**
	 * 过滤企业职位信息,每个企业只取分数前三个职位
	 * @param listComPositionGrade
	 * @return List<ComPositionGrade>
	 */
	private List<ComPositionVo> comPositionFilter(List<ComPositionVo> listComPosition) {
		if(CollectionUtils.isEmpty(listComPosition)) {
			return null;
		}
		int j = 0;
		for(int i = 0; i < listComPosition.size()-1; i++) {
			if(listComPosition.get(i).getComId() == listComPosition.get(i+1).getComId()) {
				j ++;
				if(j > 3) {
					listComPosition.remove(i+1);
				}
			} else {
				j = 0;
			}
		}
		return listComPosition;
	}
	
	/**
	 * 查询，某企业的职位是否在推荐简历得分list中
	 * @param listComPositionGrade
	 * @return
	 */
	private boolean findComPositionByComAndPos(int comId, int posId, List<ComPositionGradeVo> listComPositionGrade) {
		for(int i = 0; i < listComPositionGrade.size(); i++) {
			if(null != listComPositionGrade.get(i).getComId() && null != listComPositionGrade.get(i).getPosId()) {
				//匹配企业与职位
				if (listComPositionGrade.get(i).getComId() == comId && listComPositionGrade.get(i).getPosId() == posId) {
					listComPositionGrade.remove(i);
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * 查询，某企业是否在推荐简历得分list中
	 * @param listComPositionGrade
	 * @return
	 */
	private boolean findComPositionByCom(int comId, List<ComPositionGradeVo> listComPositionGrade) {
		for(int i = 0; i < listComPositionGrade.size(); i++) {
			if(null == listComPositionGrade.get(i).getComId() && null == listComPositionGrade.get(i).getPosId()) {
				//匹配企业与职位
				if (listComPositionGrade.get(i).getDcomId() == comId) {
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * 过滤企业发布职位表中分数不合格的企业
	 * @param listComPosition 发布职位时间不在一周内的所有职位
	 * @param listComPositionGrade 企业得分符合规则的
	 * @param Listpos 一周内收到的企业职位
	 * @return
	 */
	private List<ComPositionVo> comPositionGradeFilter(List<ComPositionVo> listComPosition, List<ComPositionGradeVo> listComPositionGrade,List<ComPositionGradeVo> listPos) {
		if(CollectionUtils.isEmpty(listComPosition)) {
			return null;
		}
		if(CollectionUtils.isEmpty(listComPositionGrade)) {
			return listComPosition;
		}
		//一周内有收到简历的适合推送的企业职位集合
		List<ComPositionVo> newListComPos = Lists.newArrayList();
		//所有一周内没收到简历的企业职位集合
		List<ComPositionVo> noComPosRecive = Lists.newArrayList();
		for(ComPositionVo obj : listComPosition) {
			//如果某企业的职位在适合推荐简历得分list中，就保存到新集合中
			if(findComPositionByComAndPos(obj.getComId(), obj.getId(), listComPositionGrade)) {
				newListComPos.add(obj);
			}
			//去掉所有收到简历的集合，保留所有最近一周内没有收到简历的集合
			if(!findComPositionByComAndPos(obj.getComId(), obj.getId(), listPos)) {
				noComPosRecive.add(obj);
			}
		}
		for(ComPositionVo obj : noComPosRecive) {
			//如果某企业在适合推荐企业list中，就保存到新集合中
			if(findComPositionByCom(obj.getComId(),listComPositionGrade)) {
				newListComPos.add(obj);
			}
		}
		return newListComPos;
	}
	
	
	/**
	 * 获取适合推荐的企业职位集合,职位发布时间不在一周内的企业
	 * @return
	 */
	private List<ComPositionVo> getRecommendComPosition(int start, int end){
		//获取企业发布时间不在一周内的职位信息
		List<ComPositionVo> listComPosition = getNotLastWeekPosition(start, end);
		//企业与职位的字符串
		String comPosStr = getComPosStr(listComPosition);
		//获取适合推送的简历得分集合
		List<ComPositionGradeVo> listComPositionGrade = getComReceiveByComIdPosId(comPosStr);
		//企业最近一周内收到,所有收到简历的职位
		List<ComPositionGradeVo> listComPos = getComReceiveByPos(comPosStr);
		//获取满足推送条件的企业职位集合,企业职位都存在并且满足规则
		List<ComPositionVo> listAllRecommendComPosition = comPositionGradeFilter(listComPosition, listComPositionGrade, listComPos);
		//每个企业每个职位取三个
		List<ComPositionVo> listRecommendComPosition = comPositionFilter(listAllRecommendComPosition);
		listComPosition = null;
		listComPositionGrade = null;
		listComPos = null;
		listAllRecommendComPosition = null;
		return listRecommendComPosition;
	}
	
    /**
     * 根据职位匹配推荐简历列表
     * @param userId
     * @param httpParamList
     * @return
     */
	private List<PerUser> getMatchedResumeListWithPosition(List<NameValuePair> httpParamList) {
		List<PerUser> dataList = null;
        if(CollectionUtils.isNotEmpty(httpParamList)){
        	CloseableHttpClient httpClient = HttpClients.createDefault();
        	HttpPost httpost = new HttpPost(Constants.API_RESUME_SEARCH_URL);
            httpost.setEntity(new UrlEncodedFormEntity(httpParamList, Consts.UTF_8));
            
            try{
            	HttpResponse response = httpClient.execute(httpost);
    			HttpEntity entity = response.getEntity();
    			if (entity != null) {
    				String jsonStr = EntityUtils.toString(entity, "utf-8");
    				EntityUtils.consume(entity);
    				ResumeSearchResult result = gson.fromJson(jsonStr, ResumeSearchResult.class);
    				if (result.isSuccess()) {
    					List<PerResVo> resumeList = result.getDataList();
    					if(CollectionUtils.isNotEmpty(resumeList)){
    						dataList = Lists.newArrayList();
    						for(PerResVo resVo : resumeList){
    							PerUser perUser = resVo.getUser();
    							perUser.setDefaultPerResume(resVo.getResume());
    							dataList.add(perUser);
    						}
    					}
    				} else {
    					logger.error("===[系统自动推荐简历]调用接口查询匹配简历列表失败：" + StringUtils.join(result.getErrorList(), ";"));
    				}
    			}
            }catch(Exception e){
            	e.printStackTrace();
            	logger.error("===[系统自动推荐简历]调用接口查询匹配简历列表异常：" + e.getMessage(), e);
            }finally{
            	try {
            		httpost.releaseConnection();
					httpClient.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        }
		return dataList;
	}

	/**
	 * 封装搜索查询参数
	 * 
	 * @param perResume
	 * @return
	 */
	private List<NameValuePair> assembleResumeSearchParam(ComPositionVo comPosition) {
		List<NameValuePair> paramList = Lists.newArrayList();
		String keywordQuery = assembleKeywordQueryStr(comPosition.getPosName(), comPosition.getPosTypeList());
		String posKeywordStr = comPosition.getPosKeywordStr();
		
		if(StringUtils.isNotBlank(keywordQuery)){
			Set<Integer> excludeResIdSet = Sets.newHashSet();
			//当前企业的职位已推荐过的简历ID列表
			excludeResIdSet.addAll(getRecommendedResIdSetByPosId(comPosition.getId()));
			//企业黑名单的简历ID列表
			excludeResIdSet.addAll(getComBlackResIdSet(comPosition.getComId()));
			//当前企业的职位已经应聘过的简历ID列表
			excludeResIdSet.addAll(getApplyResIdSetByComIdAndPosId(comPosition.getComId(), comPosition.getId()));
			List<Integer> workLocationList = Lists.newArrayList();
			if(StringUtils.isNotBlank(comPosition.getWorkLocation()) && !StringUtils.equals(comPosition.getWorkLocation(), "[]")) {
	            workLocationList = gson.fromJson(comPosition.getWorkLocation(), new TypeToken<List<Integer>>() {}.getType());
			}
			
			paramList.add(new BasicNameValuePair("keywordQueryStr", keywordQuery));
			paramList.add(new BasicNameValuePair("workareaList", StringUtils.join(workLocationList, ",")));
			paramList.add(new BasicNameValuePair("excludeIdList", StringUtils.join(excludeResIdSet, ",")));
			
			String[] posKeywordArr = StringUtils.split(posKeywordStr, " ");
			if(ArrayUtils.isNotEmpty(posKeywordArr)){
				paramList.add(new BasicNameValuePair("posKeywordList", StringUtils.join(posKeywordArr, ",")));
			}
			
			if(CollectionUtils.isNotEmpty(comPosition.getPosTypeList())){
				paramList.add(new BasicNameValuePair("posTypeList", StringUtils.join(comPosition.getPosTypeList(), ",")));
			}
			
			// 职位是否开启简历过滤功能
			if(comPosition.getFilterRes() != null && comPosition.getFilterRes() == 1){
				if(comPosition.getReqWorkYear() != null && comPosition.getReqWorkYear() != 99){
					paramList.add(new BasicNameValuePair("workyearFrom", ObjectUtils.toString(comPosition.getReqWorkYear())));
					paramList.add(new BasicNameValuePair("workyearTo", "11"));
				}
				if(comPosition.getReqDegree() != null && comPosition.getReqDegree() > 0){
					paramList.add(new BasicNameValuePair("degreeFrom", ObjectUtils.toString(comPosition.getReqDegree())));
					paramList.add(new BasicNameValuePair("degreeTo", "8"));
				}
				if(comPosition.getReqGender() != null && comPosition.getReqGender() > 0){
					paramList.add(new BasicNameValuePair("gender", ObjectUtils.toString(comPosition.getReqGender())));
				}
				if(comPosition.getReqAgeMin() != null && comPosition.getReqAgeMin() > 0){
					paramList.add(new BasicNameValuePair("ageFrom", ObjectUtils.toString(comPosition.getReqAgeMin())));
				}
				if(comPosition.getReqAgeMax() != null && comPosition.getReqAgeMax() > 0){
					paramList.add(new BasicNameValuePair("ageTo", ObjectUtils.toString(comPosition.getReqAgeMax())));
				}
				if(comPosition.getReqLocation() != null && comPosition.getReqLocation() > 0){
					paramList.add(new BasicNameValuePair("locationList", ObjectUtils.toString(comPosition.getReqLocation())));
				}
				if(comPosition.getReqLanguage() != null && comPosition.getReqLanguage() > 0){
					paramList.add(new BasicNameValuePair("languageLevel", ObjectUtils.toString(comPosition.getReqLanguage())));
				}
			}
			
			paramList.add(new BasicNameValuePair("searchType", "6"));
			paramList.add(new BasicNameValuePair("updateIn", "7"));
			paramList.add(new BasicNameValuePair("pageNo", "1"));
			paramList.add(new BasicNameValuePair("pageSize", "50"));
			paramList.add(new BasicNameValuePair("sortBy", "0"));
			paramList.add(new BasicNameValuePair("authToken", MD5Builder.md5(Constants.API_COMMON_AUTH_KEY, Constants.API_COMMON_AUTH_PASS)));
		}
		return paramList;
	}

	/**
	 * 针对职位名称分词处理，组装关键字搜索条件
	 * 
	 * @param posName
	 * @return
	 */
	private String assembleKeywordQueryStr(String posName, List<Integer> posTypeList){
		StringBuffer buf = new StringBuffer();
		if(StringUtils.isNotBlank(posName)){
			String redisPosNameKey = Constants.REDIS_KEY_POS_NAME_LEXICON_MAP;
			String redisPosRankKey = Constants.REDIS_KEY_POS_RANK_LEXICON_MAP;
			
			Set<String> wordSet = Sets.newHashSet(IKAnalysisUtil.analysisKeywordSegAndSelf(posName));
			//先从岗位类别对应词库中查找关联词
			String[] posCateArr = getWordFormRedisByPosCate(wordSet, posTypeList);
			String redisNameStr = posCateArr[1];
			//如果岗位类别中没有找到，则查找所有关联词
			if(StringUtils.isBlank(redisNameStr)){
				String[] posNameArr = getWordFromRedisByType(wordSet, redisPosNameKey);
				redisNameStr = posNameArr[1];
			}
			
			//职级REDIS词库中存在一个字的情况，同时没有将单个字加入到IK分词词库，所以手动添加单字到分词集合
			wordSet.add(posName.substring(StringUtils.length(posName) - 1));
			//从职级对应词库中查找关联词
			String[] posRankArr = getWordFromRedisByType(wordSet, redisPosRankKey);
			if(StringUtils.isNotBlank(redisNameStr)){
				buf.append("(" + StringUtils.join(StringUtils.split(redisNameStr, ","), " OR ") + ")");
				
				if(StringUtils.isNotBlank(posRankArr[1])){
					buf.append(",");
					buf.append("(" + StringUtils.join(StringUtils.split(posRankArr[1], ","), " OR ") + ")");
				}
			}else{
				buf.append("(" + StringUtils.join(wordSet, " AND ") + ")");
			}
		}
		return buf.toString();
	}

	/**
	 * <p>
	 * 从职位分词集合中获取职位名或者职级关键字<br>
	 * 说明：选取职位分词中最长的一个分词。<br>
	 * </p>
	 * 
	 * @param wordSet
	 * 
	 * @param redisKeyPrefix
	 * @return
	 */
	private String[] getWordFromRedisByType(Set<String> posNameSet, String redisKey) {
		String[] relateWordArr = new String[2];
		if (CollectionUtils.isNotEmpty(posNameSet)) {
			JedisTemplate jedisTemplate = jedisFactory.getJedisTemplate(redisKey);
			for (String word : posNameSet) {
				if (StringUtils.isNotBlank(word)) {
					boolean isExists = jedisTemplate.hExists(redisKey, word);
					if (isExists && StringUtils.length(word) > StringUtils.length(relateWordArr[0])) {
						relateWordArr[0] = word;
					}
				}
			}
			if(StringUtils.isNotBlank(relateWordArr[0])){
				relateWordArr[1] = jedisTemplate.readObjectFromMap(redisKey, relateWordArr[0], String.class);
			}
		}
		
		return relateWordArr;
	}
	
	/**
	 * 从职位分词集合中获取分类关键字
	 * @param posNameSet
	 * @return
	 */
	private String[] getWordFormRedisByPosCate(Set<String> posNameSet, List<Integer> posTypeList){
		String[] relateWordArr = new String[2];
		if(CollectionUtils.isNotEmpty(posNameSet) && CollectionUtils.isNotEmpty(posTypeList)){
			String redisKey = Constants.REDIS_KEY_POS_CATE_LEXICON_MAP;
			JedisTemplate jedisTemplate = jedisFactory.getJedisTemplate(redisKey);
			for(Integer category : posTypeList){
				if(category != null && category > 0){
					String categoryCodeStr = String.valueOf(category);
					if(jedisTemplate.hExists(redisKey, categoryCodeStr)){
						String posNameWordStr = jedisTemplate.readObjectFromMap(redisKey, categoryCodeStr, String.class);
						String[] posNameWordArr = StringUtils.split(posNameWordStr, ",");
						
						if(CollectionUtils.containsAny(posNameSet, Sets.newHashSet(posNameWordArr))){
							relateWordArr[0] = categoryCodeStr;
							relateWordArr[1] = posNameWordStr;
							break;
						}
					}
					
				}
			}
		}
		return relateWordArr;
	}
	
	/**
	 * 获取当前企业的职位已推荐过的简历ID列表
	 * @param posId
	 * @return
	 */
	private Set<Integer> getRecommendedResIdSetByPosId(Integer posId){
		Set<Integer> resIdSet = Sets.newHashSet();
		String redisKey = Constants.REDIS_KEY_RECOMMENDED_POS_ID_PREFIX + posId;
		JedisTemplate jedisTemplate = jedisFactory.getJedisTemplate(redisKey);
		Map<String, String> resumeIdMap = jedisTemplate.readFromMap(redisKey, String.class);
		if(MapUtils.isNotEmpty(resumeIdMap)){
			for(Map.Entry<String, String> entry : resumeIdMap.entrySet()){
				Date compareDate = new DateTime(entry.getKey()).plusMonths(daysInterval).withTimeAtStartOfDay().toDate();
				Date nowDate = DateTime.now().withTimeAtStartOfDay().toDate();
				
				if(compareDate.compareTo(nowDate) >= 0){ 
					Integer[] resIdArr = (Integer[])ConvertUtils.convert(StringUtils.split(entry.getValue(), ","), Integer.class);
					resIdSet.addAll(Sets.newHashSet(resIdArr));
				}
			}
		}
		return resIdSet;
	}
	
	/**
	 * 获取当前企业的职位已经应聘过的简历ID列表
	 * @param comId 企业id
	 * @param posId 职位id
	 * @param createDate 创建时间
	 * @return
	 */
	@SuppressWarnings("unused")
	private Set<Integer> getApplyResIdSetByComIdAndPosId(Integer comId, Integer posId){
		JdbcTemplate jdbcTemplate = HibernateActionSlaveUtil.getJdbcTemplate();
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT resume_id ");
		sql.append("FROM com_receive ");
		sql.append("WHERE com_id = " + comId + " ");
		sql.append("and pos_id = " + posId + " ");
		sql.append("and apply_numer > 0 ");
		sql.append("and create_date >= '"+ new DateTime(new Date()).minusMonths(daysInterval).toString("yyyy-MM-dd HH:mm:ss") + "' ");
		List<Integer> resumeIdList = jdbcTemplate.queryForList(sql.toString(), Integer.class);
		return Sets.newHashSet(resumeIdList);
	}
	
	/**
	 * 查询企业黑名单的简历ID列表
	 * 
	 * @param comId
	 * @return
	 */
	private Set<Integer> getComBlackResIdSet(Integer comId){
		JdbcTemplate jdbcTemplate = HibernateActionSlaveUtil.getJdbcTemplate();
		List<Integer> resumeIdList = jdbcTemplate.queryForList("SELECT resume_id FROM com_blacklist WHERE com_id = " + comId, Integer.class);
		return Sets.newHashSet(resumeIdList);
	}
	
	/**
	 * 添加邮件发送状态统计
	 * 
	 * @param countMap
	 * @param mailCount
	 */
	public void addMailCount(Map<String, Integer> countMap, MailCount mailCount) {
		int count = NumberUtils.toInt(String.valueOf(countMap.get(mailCount.getType())), 0) + 1;
		countMap.put(mailCount.getType(), count);
	}
	
	/**
	 * 推送简历到企业管理中心
	 * @param perResume
	 * @return
	 */
	private void saveComReceiveInfo(PerUser perUser, PerResume perResume, ComPositionVo comPosition, double matchRat){
		PerResumeVo resumeVo = new PerResumeVo(perResume);
		ComReceiveAssistVo receiveAssist = new ComReceiveAssistVo();
		//判断是否有工作经验
		if(CollectionUtils.isNotEmpty(resumeVo.getWorkInfoVoList())) {
			//获取最近的一次工作信息
			PerWorkInfoVo lastWorkInfo = resumeVo.getWorkInfoVoList().get(0);
			//设置附加信息中的工作经验信息
			receiveAssist.setLastPosName(lastWorkInfo.getJobName());
			receiveAssist.setComName(lastWorkInfo.getComName());
			receiveAssist.setStart(lastWorkInfo.getBegin());
			receiveAssist.setEnd(lastWorkInfo.getEnd());
		}
		
		//设置附加信息中的其他信息
		receiveAssist.setSkill(resumeVo.getIntentInfoVo().getProfessionSkill());
		receiveAssist.setMobile(resumeVo.getBasicInfoVo().getMobile());
		receiveAssist.setJobyearType(resumeVo.getBasicInfoVo().getJobyearType());
		
		ComReceive comReceive = new ComReceive();
		//构建收到简历对象
		comReceive.setComId(comPosition.getComId());
		comReceive.setPerUserId(resumeVo.getAccountId());
		comReceive.setResumeId(resumeVo.getId());
		comReceive.setPosId(comPosition.getId());
		comReceive.setUserName(perUser.getUserName());
		comReceive.setPosName(comPosition.getPosName());
		comReceive.setGender(perUser.getGender());
		comReceive.setAge(resumeVo.getAge());
		comReceive.setLocation(resumeVo.getBasicInfoVo().getLocation());
		comReceive.setJobLocation(resumeVo.getIntentInfoVo().getJobLocation());
		comReceive.setEmail(resumeVo.getBasicInfoVo().getEmail());
		comReceive.setApplyNumer(1);
		//设置是否购买
		comReceive.setBuyFlag(0);
		comReceive.setSysRecommend(1);
		
		//设置最高学历信息
		if(resumeVo.getMaxDegree() != null) {
			comReceive.setDegree(resumeVo.getMaxDegree().getDegree());
			comReceive.setSpeciality(resumeVo.getMaxDegree().getSpeciality());
			comReceive.setSchoolName(resumeVo.getMaxDegree().getSchoolName());
		}
				
		//设置接收到的简历类型
		comReceive.setReceiveType(ReceiveType.SYS_RECOMMAND.getValue());
		comReceive.setCreateDate(new Date());
			
		//设置附加信息
		comReceive.setMixInfo(new Gson().toJson(receiveAssist));
		comReceive.setUpdateDate(new Date());
		
		//设置简历匹配度
		comReceive.setMatchRat(matchRat);
		
		//添加或保存企业收到简历
		HibernateActionUtil.currentSession().save(comReceive);
	}
	
	/**
	 * 记录推荐简历ID到对应的职位REDIS
	 * @param posId
	 * @param resumeId
	 */
	private void logRecommendedToRedis(Integer posId, List<Integer> resumeIdList){
		if(posId != null && posId > 0 && CollectionUtils.isNotEmpty(resumeIdList)){
			Set<String> resumeIdSet = Sets.newHashSet(resumeIdList.toArray(new String[resumeIdList.size()]));
			
			String redisKey = Constants.REDIS_KEY_RECOMMENDED_POS_ID_PREFIX + posId;
			String fieldKey = DateTime.now().toString("yyyy-MM-dd");
			
			JedisTemplate jedisTemplate = jedisFactory.getJedisTemplate(redisKey);
			String recommendResIds = jedisTemplate.readObjectFromMap(redisKey, fieldKey, String.class);
			
			if(StringUtils.isNotBlank(recommendResIds)){
				Collections.addAll(resumeIdSet, StringUtils.split(recommendResIds, ","));
			}
			jedisTemplate.writeToMap(redisKey, fieldKey, StringUtils.join(resumeIdSet, ","));
		}
	}
}
